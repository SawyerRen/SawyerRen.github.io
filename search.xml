<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IntelliJ IDEA常用插件.md</title>
    <url>/2023/03/14/IntelliJ-IDEA%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6-md/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>本文介绍一些在Intellij IDEA中常用的插件。</p>
<span id="more"></span>

<h3 id="如何安装插件"><a href="#如何安装插件" class="headerlink" title="如何安装插件"></a>如何安装插件</h3><p>打开IDEA的Settings，左边栏找到Plugins，可以看到Marketplace中的插件和已经安装的插件。</p>
<p>找到你希望安装的插件，点击Install即可安装，安装后需要重启IDEA插件才能生效。</p>
<h3 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h3><p><img data-src="https://raw.githubusercontent.com/SawyerRen/pictures/master/image-20230314212304041.png?token=AMIFG7F6RCFYCYRSBIHSES3ECEPDM" alt="image-20230314212304041"></p>
<p>这个插件可以在代码中勾选你希望翻译的词句，进行翻译。</p>
<h3 id="Rainbow-Brackets"><a href="#Rainbow-Brackets" class="headerlink" title="Rainbow Brackets"></a>Rainbow Brackets</h3><p><img data-src="https://raw.githubusercontent.com/SawyerRen/pictures/master/image-20230314212319424.png?token=AMIFG7HBRA6BRWIKOGJN2WDECEPEK" alt="image-20230314212319424"></p>
<p>这个插件会给你的括号添加颜色，不同层的括号颜色不同，方便查看对应的括号。</p>
<h3 id="Key-Promoter-X"><a href="#Key-Promoter-X" class="headerlink" title="Key Promoter X"></a>Key Promoter X</h3><p><img data-src="https://raw.githubusercontent.com/SawyerRen/pictures/master/image-20230314212338406.png?token=AMIFG7HMOJAFFOFF3JOESDLECEPFQ" alt="image-20230314212338406"></p>
<p>这个插件会在你用鼠标等方式进行一些可以使用快捷键的操作时，提醒你对应的快捷键。</p>
<h3 id="CodeGlance-Pro"><a href="#CodeGlance-Pro" class="headerlink" title="CodeGlance Pro"></a>CodeGlance Pro</h3><p><img data-src="https://raw.githubusercontent.com/SawyerRen/pictures/master/image-20230314212413477.png?token=AMIFG7CYEQXISAOFHU5SU6TECEPHW" alt="image-20230314212413477"></p>
<p>这个插件会在编辑器的右边生成一个你的代码的缩略图，并且可以拖动这个缩略图来进行代码的查看。</p>
<h3 id="AiXcoder-Code-Completer"><a href="#AiXcoder-Code-Completer" class="headerlink" title="AiXcoder Code Completer"></a>AiXcoder Code Completer</h3><p><img data-src="https://raw.githubusercontent.com/SawyerRen/pictures/master/image-20230314212426829.png?token=AMIFG7FDFENC3ZNPFDR56CTECEPIQ" alt="image-20230314212426829"></p>
<p>这个插件能提供比IDEA自带的更强大的代码补全功能。</p>
]]></content>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>练习三的答案</title>
    <url>/2023/04/11/%E7%BB%83%E4%B9%A0%E4%B8%89%E7%9A%84%E7%AD%94%E6%A1%88-md/</url>
    <content><![CDATA[<h3 id="Account类"><a href="#Account类" class="headerlink" title="Account类"></a>Account类</h3><span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> annualInterestRate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">int</span> id, <span class="type">double</span> balance, <span class="type">double</span> annualInterestRate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">        <span class="built_in">this</span>.annualInterestRate = annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getAnnualInterestRate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAnnualInterestRate</span><span class="params">(<span class="type">double</span> annualInterestRate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.annualInterestRate = annualInterestRate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getMonthlyInterest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.annualInterestRate / <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.balance &lt; amount) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;余额不足！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.balance -= amount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您的账户余额为: &quot;</span>+<span class="built_in">this</span>.balance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="CheckAccount类"><a href="#CheckAccount类" class="headerlink" title="CheckAccount类"></a>CheckAccount类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CheckAccount</span> <span class="keyword">extends</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> overdraft;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CheckAccount</span><span class="params">(<span class="type">int</span> id, <span class="type">double</span> balance, <span class="type">double</span> annualInterestRate, <span class="type">double</span> overdraft)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(id, balance, annualInterestRate);</span><br><span class="line">        <span class="built_in">this</span>.overdraft = overdraft;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(<span class="type">double</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.getBalance() &gt; amount) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setBalance(<span class="built_in">this</span>.getBalance() - amount);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">overAmount</span> <span class="operator">=</span> amount - <span class="built_in">this</span>.getBalance();</span><br><span class="line">            <span class="keyword">if</span> (overAmount &gt; <span class="built_in">this</span>.overdraft) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;超过可透支的限额&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.setBalance(<span class="number">0</span>);</span><br><span class="line">                <span class="built_in">this</span>.overdraft -= overAmount;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;账户余额为： &quot;</span> + <span class="built_in">this</span>.getBalance() + <span class="string">&quot;, 可透支： &quot;</span> + <span class="built_in">this</span>.overdraft);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="TestAccount类"><a href="#TestAccount类" class="headerlink" title="TestAccount类"></a>TestAccount类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAccount</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        testAccount();</span></span><br><span class="line">        testCheckAccount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testAccount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">1122</span>, <span class="number">20000</span>, <span class="number">0.045</span>);</span><br><span class="line">        account.withdraw(<span class="number">30000</span>);</span><br><span class="line">        account.printBalance();</span><br><span class="line">        account.withdraw(<span class="number">2500</span>);</span><br><span class="line">        account.deposit(<span class="number">3000</span>);</span><br><span class="line">        account.printBalance();</span><br><span class="line">        System.out.println(<span class="string">&quot;月利率为： &quot;</span> + account.getMonthlyInterest());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testCheckAccount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CheckAccount</span>(<span class="number">1122</span>, <span class="number">20000</span>, <span class="number">0.045</span>, <span class="number">5000</span>);</span><br><span class="line">        account.withdraw(<span class="number">5000</span>);</span><br><span class="line">        account.printBalance();</span><br><span class="line">        account.withdraw(<span class="number">18000</span>);</span><br><span class="line">        account.printBalance();</span><br><span class="line">        account.withdraw(<span class="number">3000</span>);</span><br><span class="line">        account.printBalance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>python async 笔记</title>
    <url>/2023/05/21/python-async-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="1-协程"><a href="#1-协程" class="headerlink" title="1. 协程"></a>1. 协程</h2><p>协程（Coroutine）不是操作系统提供的，是人为创造的。是一种用户态内的上下文切换技术，通过一个线程实现代码块相互切换执行。</p>
<span id="more"></span>

<p>实现协程的方法：</p>
<ul>
<li>yield关键字</li>
<li>asyncio装饰器</li>
<li>async，await 关键字【推荐】</li>
</ul>
<h3 id="1-1-asyncio"><a href="#1-1-asyncio" class="headerlink" title="1.1 asyncio"></a>1.1 asyncio</h3><p>在python3.4及以后的版本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 遇到IO操作耗时，自动切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 遇到IO操作耗时，自动切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(func1()),</span><br><span class="line">    asyncio.ensure_future(func2())</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-2-async-amp-await关键字"><a href="#1-2-async-amp-await关键字" class="headerlink" title="1.2 async &amp; await关键字"></a>1.2 async &amp; await关键字</h3><p>在python3.5及以后的版本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 遇到IO操作耗时，自动切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 遇到IO操作耗时，自动切换到tasks中的其他任务</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tasks = [</span><br><span class="line">    asyncio.ensure_future(func1()),</span><br><span class="line">    asyncio.ensure_future(func2())</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>

<h2 id="2-协程意义"><a href="#2-协程意义" class="headerlink" title="2. 协程意义"></a>2. 协程意义</h2><p>在一个线程中如果遇到IO等待时间，线程不会等待，会利用空闲的时间去做其他操作。</p>
<p>如：下载图片（网络IO）</p>
<ul>
<li><p>普通方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_pic</span>(<span class="params">url: <span class="built_in">str</span></span>):</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    file_name = url.rsplit(<span class="string">&quot;_&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">        file_obj.write(response.content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url_list = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        download_pic(url)</span><br></pre></td></tr></table></figure>
</li>
<li><p>异步方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">fetch</span>(<span class="params">session, url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> response:</span><br><span class="line">        content = <span class="keyword">await</span> response.content.read()</span><br><span class="line">        file_name = url.rsplit(<span class="string">&quot;_&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file_obj:</span><br><span class="line">            file_obj.write(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        url_list = []</span><br><span class="line">        tasks = [asyncio.create_task(fetch(session, url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</span><br><span class="line">        <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-异步编程"><a href="#3-异步编程" class="headerlink" title="3. 异步编程"></a>3. 异步编程</h2><h3 id="3-1-事件循环"><a href="#3-1-事件循环" class="headerlink" title="3.1 事件循环"></a>3.1 事件循环</h3><p>一个死循环，检测并执行某些代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pseudo code</span><br><span class="line"></span><br><span class="line">task_list = [task1, task2, task3...]</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">	Executable list, finished list = Check all tasks in the list</span><br><span class="line">	</span><br><span class="line">	for executable task:</span><br><span class="line">		execute task</span><br><span class="line">	</span><br><span class="line">	for finished task:</span><br><span class="line">		remove task from task list</span><br><span class="line">	</span><br><span class="line">	if all tasks are finished:</span><br><span class="line">		break</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 生成事件循环</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="comment"># 将任务放到任务列表中</span></span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br></pre></td></tr></table></figure>

<h3 id="3-2-基本概念"><a href="#3-2-基本概念" class="headerlink" title="3.2 基本概念"></a>3.2 基本概念</h3><p>协程函数：在函数前加上<code>async</code>。</p>
<p>协程对象：执行协程函数得到的对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">res = func()</span><br></pre></td></tr></table></figure>

<p>创建协程对象后，函数内部代码不会执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">res = func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># loop = asyncio.get_event_loop()</span></span><br><span class="line"><span class="comment"># loop.run_until_complete( res )</span></span><br><span class="line">asyncio.run(res) <span class="comment"># python3.7之后出现</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-await"><a href="#3-3-await" class="headerlink" title="3.3 await"></a>3.3 await</h3><p>await + 可等待的对象（协程对象，Future, Task对象）</p>
<p>示例1:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    response = <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span>, response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(func())</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">others</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start func&quot;</span>)</span><br><span class="line">    response1 = <span class="keyword">await</span> others()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end func, response1 = &quot;</span>, response1)</span><br><span class="line">    response2 = <span class="keyword">await</span> others()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end func, response2 = &quot;</span>, response2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(func())</span><br></pre></td></tr></table></figure>

<p>await会等待对象得到返回值后再继续执行</p>
<h3 id="3-4-Task对象"><a href="#3-4-Task对象" class="headerlink" title="3.4 Task对象"></a>3.4 Task对象</h3><p>Task对象用来并发地调度协程，当一个协程被包装到了一个Task中后，这个协程会自动加入事件循环并等待执行，一般用<code>asyncio.create_task(协程对象)</code>创建Task。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start main&quot;</span>)</span><br><span class="line">    task_list = [</span><br><span class="line">        asyncio.create_task(func()),</span><br><span class="line">        asyncio.create_task(func())</span><br><span class="line">    ]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end main&quot;</span>)</span><br><span class="line">    done, pending = <span class="keyword">await</span> asyncio.wait(task_list)</span><br><span class="line">    <span class="built_in">print</span>(done)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure>

<h3 id="3-5-Future对象"><a href="#3-5-Future对象" class="headerlink" title="3.5 Future对象"></a>3.5 Future对象</h3><p>Future对象代表了异步操作的最终结果，Task继承Future，Task对象内部await结果的处理基于Future对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">set_after</span>(<span class="params">fut</span>):</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    fut.set_result(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 获取当前事件循环</span></span><br><span class="line">    loop = asyncio.get_running_loop()</span><br><span class="line">    <span class="comment"># 创建一个Future对象</span></span><br><span class="line">    fut = loop.create_future()</span><br><span class="line">    <span class="comment"># 创建一个任务对象，其中的函数会给Future赋值并返回，这样Future就会结束了</span></span><br><span class="line">    <span class="keyword">await</span> loop.create_task(set_after(fut))</span><br><span class="line">    <span class="comment"># 等待Future对象最终结果</span></span><br><span class="line">    data = <span class="keyword">await</span> fut</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure>

<h3 id="3-6-concurrent中的Future对象"><a href="#3-6-concurrent中的Future对象" class="headerlink" title="3.6 concurrent中的Future对象"></a>3.6 concurrent中的Future对象</h3><p>使用线程池、进程池实现异步操作的时候会用到的对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures.thread <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">value</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建线程池</span></span><br><span class="line">pool = ThreadPoolExecutor(max_workers=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        fut = pool.submit(func, i)</span><br><span class="line">        <span class="built_in">print</span>(fut)</span><br></pre></td></tr></table></figure>

<p>在开发过程中可能会存在同时用到协程和线程池的情况。一般我们使用协程，但有些模块不支持协程，如一些和数据库交互的模块，就需要使用线程和进程进行异步操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    loop = asyncio.get_running_loop()</span><br><span class="line">    <span class="comment"># 把func包装到Future中，放到线程池中</span></span><br><span class="line">    fut = loop.run_in_executor(<span class="literal">None</span>, func)</span><br><span class="line">    res = <span class="keyword">await</span> fut</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;default thread pool&quot;</span>, res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure>

<h3 id="3-7-上下文管理器"><a href="#3-7-上下文管理器" class="headerlink" title="3.7 上下文管理器"></a>3.7 上下文管理器</h3><p>对象通过定义<code>__aenter__</code>和<code>__aexit__</code>方法来控制上下文。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContextManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.conn = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 异步操作数据库</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__aenter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 异步连接数据库</span></span><br><span class="line">        self.conn = <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">__aexit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="comment"># 异步关闭连接</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> ContextManager() <span class="keyword">as</span> f:</span><br><span class="line">        res = <span class="keyword">await</span> f.func()</span><br><span class="line">        <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure>

<h2 id="4-案例"><a href="#4-案例" class="headerlink" title="4. 案例"></a>4. 案例</h2><h3 id="4-1-异步操作redis"><a href="#4-1-异步操作redis" class="headerlink" title="4.1 异步操作redis"></a>4.1 异步操作redis</h3><p>在用Python操作redis时，连接、操作、断开都可以用异步编程。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aioredis</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">address, pwd</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start process&quot;</span>)</span><br><span class="line"></span><br><span class="line">    redis = <span class="keyword">await</span> aioredis.create_redis(address, pwd)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> redis.<span class="built_in">set</span>(<span class="string">&#x27;car&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    redis.close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> redis.wait_closed()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-2-异步MySQL"><a href="#4-2-异步MySQL" class="headerlink" title="4.2 异步MySQL"></a>4.2 异步MySQL</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiomysql</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    conn = <span class="keyword">await</span> aiomysql.connect()</span><br><span class="line"></span><br><span class="line">    cur = <span class="keyword">await</span> conn.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> cur.execute(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    res = <span class="keyword">await</span> cur.fetchall()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> cur.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>异步的意义：通过一个线程利用其IO等待时间去做其他事情。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
